<?php

namespace Hebbinkpro\DebugWorld;

use pocketmine\block\RuntimeBlockStateRegistry;
use pocketmine\math\Vector3;
use pocketmine\plugin\PluginBase;
use pocketmine\world\generator\GeneratorManager;
use pocketmine\world\World;

class DebugWorld extends PluginBase
{
    public const DEBUG_GENERATOR = "debug";

    /** @var int[] */
    private array $knownDebugWorlds = [];

    protected function onEnable(): void
    {
        $gm = GeneratorManager::getInstance();
        $gm->addGenerator(DebugWorldGenerator::class, self::DEBUG_GENERATOR, fn() => null);

        $wm = $this->getServer()->getWorldManager();

        foreach ($wm->getWorlds() as $world) {
            // apply debug world behavior to the loaded world
            if (self::isDebugWorld($world)) self::applyDebugWorldBehavior($world);
        }

        $this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
    }

    /**
     * Check if the given world is generated by the DebugWorldGenerator
     * @param World $world the world to check
     * @return bool
     */
    public function isDebugWorld(World $world): bool
    {
        // check if the world id is already in the known debug worlds list
        if (in_array($world->getId(), $this->knownDebugWorlds)) return true;

        // get the generator class
        $genName = $world->getProvider()->getWorldData()->getGenerator();
        $generator = GeneratorManager::getInstance()->getGenerator($genName);

        // check if the generator class is the DebugWorldGenerator
        if ($generator?->getGeneratorClass() !== DebugWorldGenerator::class) return false;

        // append the world id to the known debug worlds list
        $this->knownDebugWorlds[] = $world->getId();
        return true;
    }

    /**
     * Apply the debug world behavior to the given world
     * @param World $world the world to apply the behavior to
     * @return void
     */
    public function applyDebugWorldBehavior(World $world): void
    {
        // disable chunk ticks
        $world->setChunkTickRadius(0);

        // unset all ticked blocks
        foreach ($world->getRandomTickedBlocks() as $state => $true) {
            $block = RuntimeBlockStateRegistry::getInstance()->fromStateId($state);
            $world->addRandomTickedBlock($block);
        }

        // set world difficulty to peaceful
        $world->setDifficulty(0);

        // set spawn location to 0,71,0 at the start of the grid on the barrier floor
        $world->setSpawnLocation(new Vector3(0, DebugWorldGenerator::BARRIER_FLOOR_HEIGHT + 1, 0));
    }


}